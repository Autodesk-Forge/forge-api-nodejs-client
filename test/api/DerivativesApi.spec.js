/**
 * Forge SDK
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodeskâ€™s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module.export = (function() {
  'use strict';

  var expect = require('expect.js'),
      sinon = require('sinon'),
      ForgeSdk = require('../../src'),
      instance,
      oauth2client,
      credentials,
      mockedApiClientRequest,
      ApiClient = require('../../src/ApiClient'),
      Diagnostics = require('../../src/model/Diagnostics'),
      Formats = require('../../src/model/Formats'),
      Job = require('../../src/model/Job'),
      JobPayload = require('../../src/model/JobPayload'),
      Manifest = require('../../src/model/Manifest'),
      Metadata = require('../../src/model/Metadata'),
      Result = require('../../src/model/Result');

  var sampleStrParam = 'test_string';
  var sampleIntParam = 10;

  var apiClient = new ApiClient();

  before(function(){
    oauth2client = new ForgeSdk.AuthClientTwoLegged('CLIENT_ID', 'CLIENT_SECRET', ['data:read', 'data:write']);
    credentials = {access_token: 'abce'};
    instance = new ForgeSdk.DerivativesApi(apiClient);
    mockedApiClientRequest = sinon.stub(instance.apiClient, 'callApi');
  });

   after(function () {
     apiClient.callApi.restore();
   });


  describe('DerivativesApi', function() {
    describe('deleteManifest', function() {
      it('should call deleteManifest successfully', function(done) {

        var postBody = null;

        var pathParams = { 
        'urn': sampleStrParam
        };
        var queryParams = { 
        };
        var headerParams = { 
        };
        var formParams = { 
        };

        var contentTypes = ['application/x-www-form-urlencoded'];
        var accepts = ['application/vnd.api+json', 'application/json'];
        var returnType = Result;

        mockedApiClientRequest.withArgs('/modelderivative/v2/designdata/{urn}/manifest', 'DELETE',
                pathParams, queryParams, headerParams, formParams, postBody,
                contentTypes, accepts, returnType, oauth2client, credentials).returns(Promise.resolve('Success result'));

        instance.deleteManifest(sampleStrParam, oauth2client, credentials).then(function(response){
            expect(response).to.be.ok();
            done();
        }, function(err){
            done(err);
        });
      });
    });
    describe('getDerivativeManifest', function() {
      it('should call getDerivativeManifest successfully', function(done) {
        var opts = {};
        var postBody = null;

        var pathParams = { 
        'urn': sampleStrParam,
        'derivativeUrn': sampleStrParam
        };
        var queryParams = { 
        };
        var headerParams = { 
        'Range': opts['range']
        };
        var formParams = { 
        };

        var contentTypes = ['application/json'];
        var accepts = ['application/octet-stream'];
        var returnType = null;

        mockedApiClientRequest.withArgs('/modelderivative/v2/designdata/{urn}/manifest/{derivativeUrn}', 'GET',
                pathParams, queryParams, headerParams, formParams, postBody,
                contentTypes, accepts, returnType, oauth2client, credentials).returns(Promise.resolve('Success result'));

        instance.getDerivativeManifest(sampleStrParam, sampleStrParam, opts, oauth2client, credentials).then(function(response){
            expect(response).to.be.ok();
            done();
        }, function(err){
            done(err);
        });
      });
    });
    describe('getFormats', function() {
      it('should call getFormats successfully', function(done) {
        var opts = {};
        var postBody = null;

        var pathParams = { 
        };
        var queryParams = { 
        };
        var headerParams = { 
        'If-Modified-Since': opts['ifModifiedSince'],
        'Accept-Encoding': opts['acceptEncoding']
        };
        var formParams = { 
        };

        var contentTypes = ['application/json'];
        var accepts = ['application/vnd.api+json', 'application/json'];
        var returnType = Formats;

        mockedApiClientRequest.withArgs('/modelderivative/v2/designdata/formats', 'GET',
                pathParams, queryParams, headerParams, formParams, postBody,
                contentTypes, accepts, returnType, oauth2client, credentials).returns(Promise.resolve('Success result'));

        instance.getFormats(opts, oauth2client, credentials).then(function(response){
            expect(response).to.be.ok();
            done();
        }, function(err){
            done(err);
        });
      });
    });
    describe('getManifest', function() {
      it('should call getManifest successfully', function(done) {
        var opts = {};
        var postBody = null;

        var pathParams = { 
        'urn': sampleStrParam
        };
        var queryParams = { 
        };
        var headerParams = { 
        'Accept-Encoding': opts['acceptEncoding']
        };
        var formParams = { 
        };

        var contentTypes = ['application/json'];
        var accepts = ['application/vnd.api+json', 'application/json'];
        var returnType = Manifest;

        mockedApiClientRequest.withArgs('/modelderivative/v2/designdata/{urn}/manifest', 'GET',
                pathParams, queryParams, headerParams, formParams, postBody,
                contentTypes, accepts, returnType, oauth2client, credentials).returns(Promise.resolve('Success result'));

        instance.getManifest(sampleStrParam, opts, oauth2client, credentials).then(function(response){
            expect(response).to.be.ok();
            done();
        }, function(err){
            done(err);
        });
      });
    });
    describe('getMetadata', function() {
      it('should call getMetadata successfully', function(done) {
        var opts = {};
        var postBody = null;

        var pathParams = { 
        'urn': sampleStrParam
        };
        var queryParams = { 
        };
        var headerParams = { 
        'Accept-Encoding': opts['acceptEncoding']
        };
        var formParams = { 
        };

        var contentTypes = ['application/json'];
        var accepts = ['application/vnd.api+json', 'application/json'];
        var returnType = Metadata;

        mockedApiClientRequest.withArgs('/modelderivative/v2/designdata/{urn}/metadata', 'GET',
                pathParams, queryParams, headerParams, formParams, postBody,
                contentTypes, accepts, returnType, oauth2client, credentials).returns(Promise.resolve('Success result'));

        instance.getMetadata(sampleStrParam, opts, oauth2client, credentials).then(function(response){
            expect(response).to.be.ok();
            done();
        }, function(err){
            done(err);
        });
      });
    });
    describe('getModelviewMetadata', function() {
      it('should call getModelviewMetadata successfully', function(done) {
        var opts = {};
        var postBody = null;

        var pathParams = { 
        'urn': sampleStrParam,
        'guid': sampleStrParam
        };
        var queryParams = { 
        };
        var headerParams = { 
        'Accept-Encoding': opts['acceptEncoding']
        };
        var formParams = { 
        };

        var contentTypes = ['application/json'];
        var accepts = ['application/vnd.api+json', 'application/json'];
        var returnType = Metadata;

        mockedApiClientRequest.withArgs('/modelderivative/v2/designdata/{urn}/metadata/{guid}', 'GET',
                pathParams, queryParams, headerParams, formParams, postBody,
                contentTypes, accepts, returnType, oauth2client, credentials).returns(Promise.resolve('Success result'));

        instance.getModelviewMetadata(sampleStrParam, sampleStrParam, opts, oauth2client, credentials).then(function(response){
            expect(response).to.be.ok();
            done();
        }, function(err){
            done(err);
        });
      });
    });
    describe('getModelviewProperties', function() {
      it('should call getModelviewProperties successfully', function(done) {
        var opts = {};
        var postBody = null;

        var pathParams = { 
        'urn': sampleStrParam,
        'guid': sampleStrParam
        };
        var queryParams = { 
        };
        var headerParams = { 
        'Accept-Encoding': opts['acceptEncoding']
        };
        var formParams = { 
        };

        var contentTypes = ['application/json'];
        var accepts = ['application/vnd.api+json', 'application/json'];
        var returnType = Metadata;

        mockedApiClientRequest.withArgs('/modelderivative/v2/designdata/{urn}/metadata/{guid}/properties', 'GET',
                pathParams, queryParams, headerParams, formParams, postBody,
                contentTypes, accepts, returnType, oauth2client, credentials).returns(Promise.resolve('Success result'));

        instance.getModelviewProperties(sampleStrParam, sampleStrParam, opts, oauth2client, credentials).then(function(response){
            expect(response).to.be.ok();
            done();
        }, function(err){
            done(err);
        });
      });
    });
    describe('getThumbnail', function() {
      it('should call getThumbnail successfully', function(done) {
        var opts = {};
        var postBody = null;

        var pathParams = { 
        'urn': sampleStrParam
        };
        var queryParams = { 
        'width': opts['width'],
        'height': opts['height']
        };
        var headerParams = { 
        };
        var formParams = { 
        };

        var contentTypes = ['application/json'];
        var accepts = ['application/octet-stream'];
        var returnType = Object;

        mockedApiClientRequest.withArgs('/modelderivative/v2/designdata/{urn}/thumbnail', 'GET',
                pathParams, queryParams, headerParams, formParams, postBody,
                contentTypes, accepts, returnType, oauth2client, credentials).returns(Promise.resolve('Success result'));

        instance.getThumbnail(sampleStrParam, opts, oauth2client, credentials).then(function(response){
            expect(response).to.be.ok();
            done();
        }, function(err){
            done(err);
        });
      });
    });
    describe('translate', function() {
      it('should call translate successfully', function(done) {
        var opts = {};
        var postBody = sampleStrParam;

        var pathParams = { 
        };
        var queryParams = { 
        };
        var headerParams = { 
        'x-ads-force': opts['xAdsForce']
        };
        var formParams = { 
        };

        var contentTypes = ['application/json'];
        var accepts = ['application/vnd.api+json', 'application/json'];
        var returnType = Job;

        mockedApiClientRequest.withArgs('/modelderivative/v2/designdata/job', 'POST',
                pathParams, queryParams, headerParams, formParams, postBody,
                contentTypes, accepts, returnType, oauth2client, credentials).returns(Promise.resolve('Success result'));

        instance.translate(sampleStrParam, opts, oauth2client, credentials).then(function(response){
            expect(response).to.be.ok();
            done();
        }, function(err){
            done(err);
        });
      });
    });
  });

}());
